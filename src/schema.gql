# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserOperationModel {
  callData: Hexadecimal!
  sender: Hexadecimal!
  signature: Hexadecimal!
  initCode: Hexadecimal!
  paymasterAndData: Hexadecimal!
  maxFeePerGas: BigInt!
  maxPriorityFeePerGas: BigInt!
  nonce: BigInt!
  callGasLimit: BigInt!
  preVerificationGas: BigInt!
  verificationGasLimit: BigInt!
}

"""Any string that starts with 0x"""
scalar Hexadecimal

"""Numbers with no precision loss"""
scalar BigInt

type CreateUserOperationERC20ApproveOutput {
  userOperation: UserOperationModel
  maxGasFeeNative: String
  maxGasFeeToken: String
  payingToken: Asset
  chainId: Int!
}

"""All assets (Union of Currency & InvestmentAsset)"""
enum Asset {
  USDC
  BRZ
  BIB01
  AAVE
  GHST
  APE
  BAL
  LINK
  COMP
  CRV
  DAI
  FRAX
  LDO
  MIMATIC
  MKR
  EURS
  SD
  SUSHI
  SNX
  TETU
  THX
  TEL
  USDT
  GRT
  SAND
  UNI
  WBTC
  WETH
  WMATIC
  RENBTC
  YFI
  STG
  GNS
  MVX
  DHT
  POOL
  WOO
  FXS
  QUICK
  STMATIC
  WSTETH
  NEX
}

type CreateUserOperationOutput {
  userOperation: UserOperationModel!
  maxGasFeeNative: String!
  maxGasFeeToken: String!
  payingToken: Asset!
  chainId: Int!
}

type DepositModel {
  pixAddress: String!
  qrCode: String!
  expiresAt: String!
}

type UserOperationReceipt {
  success: Boolean!
  userOpHash: Hexadecimal!
  transactionHash: Hexadecimal!
  gasUsedNative: String!
}

type ExecuteUserOperationOutput {
  operationHashes: [Hexadecimal!]! @deprecated(reason: "Same information is now available in *userOpReceipts[].userOpHash*")
  userOpReceipts: [UserOperationReceipt!]!
}

type GetAccountAbstractionAddressByOwnerOutput {
  accountAbstractionAddress: Hexadecimal!
}

type GetBalanceOutput {
  balance: BigInt!
  formattedBalance: String!
}

type TransactionModel {
  timestamp: Date
  type: String!
  amount: String!
  asset: String!
  transactionId: String
}

"""Date custom scalar type"""
scalar Date

type GetTransactionHistoryOutput {
  transactions: [TransactionModel!]!
}

type QuoteModel {
  quoteId: String!
  price: Float!
  expiresAt: String!
}

type WithdrawModel {
  blockchainDepositAddress: Hexadecimal!
  expiresAt: String!
  qrCode: String!
  depositCurrency: StableCurrency!
  depositAmount: Float!
}

"""The supported currencies"""
enum StableCurrency {
  BRZ
  USDC
}

input UserOperationInput {
  callData: Hexadecimal!
  sender: Hexadecimal!
  signature: Hexadecimal!
  initCode: Hexadecimal!
  paymasterAndData: Hexadecimal!
  maxFeePerGas: BigInt!
  maxPriorityFeePerGas: BigInt!
  nonce: BigInt!
  callGasLimit: BigInt!
  preVerificationGas: BigInt!
  verificationGasLimit: BigInt!
}

type Query {
  balanceByCurrency(address: Hexadecimal!, currency: Asset!): GetBalanceOutput!
  accountAbstractionAddressByOwner(owner: Hexadecimal!): GetAccountAbstractionAddressByOwnerOutput!
  transactions(address: Hexadecimal!): GetTransactionHistoryOutput!
}

type Mutation {
  createUserOperationERC20Approve(accountAbstractionAddress: Hexadecimal!, from: Hexadecimal!, asset: Asset!, spender: Hexadecimal!, payFeesUsing: StableCurrency): CreateUserOperationERC20ApproveOutput!
  createUserOperationTransfer(accountAbstractionAddress: Hexadecimal!, amount: String!, currency: StableCurrency!, from: Hexadecimal!, to: Hexadecimal!, payFeesUsing: StableCurrency): CreateUserOperationOutput!
  createUserOperationInvest(accountAbstractionAddress: Hexadecimal!, amount: String!, currency: StableCurrency!, from: Hexadecimal!, asset: InvestmentAsset!, payFeesUsing: StableCurrency): CreateUserOperationOutput!
  createUserOperationSwap(accountAbstractionAddress: Hexadecimal!, from: Hexadecimal!, swapData: Hexadecimal!, payFeesUsing: StableCurrency): CreateUserOperationOutput!
  createUserOperationWithdrawInvestment(accountAbstractionAddress: Hexadecimal!, amount: String!, currency: StableCurrency!, from: Hexadecimal!, asset: InvestmentAsset!, payFeesUsing: StableCurrency): CreateUserOperationOutput!
  userOperationExecute(userOperations: [UserOperationInput!]!): ExecuteUserOperationOutput!
  requestDepositQuote(from: FiatCurrency!, to: StableCurrency!, amount: Float!): QuoteModel!
  requestWithdrawQuote(from: StableCurrency!, to: FiatCurrency!, amount: Float!): QuoteModel!
  depositFiat(quoteId: String!, recipientAddress: Hexadecimal!, taxId: String!): DepositModel!
  withdrawFiat(quoteId: String!, recipientPixAddress: String!, taxId: String!): WithdrawModel!
}

"""The available investment options"""
enum InvestmentAsset {
  BIB01
}

"""The supported fiat currencies"""
enum FiatCurrency {
  BRL
}