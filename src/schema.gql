# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type GetBalanceOutput {
  balance: BigInt!
  formattedBalance: String!
}

"""Numbers with no precision loss"""
scalar BigInt

type UserOperationModel {
  callData: Hexadecimal!
  sender: Hexadecimal!
  signature: Hexadecimal!
  initCode: Hexadecimal!
  paymasterAndData: Hexadecimal!
  maxFeePerGas: BigInt!
  maxPriorityFeePerGas: BigInt!
  nonce: BigInt!
  callGasLimit: BigInt!
  preVerificationGas: BigInt!
  verificationGasLimit: BigInt!
}

"""Any string that starts with 0x"""
scalar Hexadecimal

type CreateUserOperationTransferOutput {
  userOperation: UserOperationModel!
  chainId: Int!
}

type CreateUserOperationInvestOutput {
  userOperation: UserOperationModel!
  chainId: Int!
}

type CreateUserOperationWithdrawOutput {
  userOperation: UserOperationModel!
  chainId: Int!
}

type GetAccountAbstractionAddressByOwnerOutput {
  accountAbstractionAddress: Hexadecimal!
}

type ExecuteUserOperationOutput {
  operationHash: Hexadecimal!
}

type QuoteModel {
  quoteId: String!
  price: Float!
  expireAt: String!
}

input UserOperationInput {
  callData: Hexadecimal!
  sender: Hexadecimal!
  signature: Hexadecimal!
  initCode: Hexadecimal!
  paymasterAndData: Hexadecimal!
  maxFeePerGas: BigInt!
  maxPriorityFeePerGas: BigInt!
  nonce: BigInt!
  callGasLimit: BigInt!
  preVerificationGas: BigInt!
  verificationGasLimit: BigInt!
}

type Query {
  balanceByCurrency(address: Hexadecimal!, currency: Asset!): GetBalanceOutput!
  accountAbstractionAddressByOwner(owner: Hexadecimal!): GetAccountAbstractionAddressByOwnerOutput!
}

"""All assets (Union of Currency & FixedIncome)"""
enum Asset {
  USDC
  BRZ
  BIB01
}

type Mutation {
  createUserOperationTransfer(accountAbstractionAddress: Hexadecimal!, amount: String!, currency: Currency!, from: Hexadecimal!, to: Hexadecimal!): CreateUserOperationTransferOutput!
  createUserOperationInvest(accountAbstractionAddress: Hexadecimal!, amount: String!, currency: Currency!, from: Hexadecimal!, asset: FixedIncome!): CreateUserOperationInvestOutput!
  createUserOperationWithdraw(accountAbstractionAddress: Hexadecimal!, amount: String!, currency: Currency!, from: Hexadecimal!, asset: FixedIncome!): CreateUserOperationWithdrawOutput!
  userOperationExecute(userOperation: UserOperationInput!): ExecuteUserOperationOutput!
  requestQuote(from: String!, to: String!, amount: Float!): QuoteModel!
}

"""The supported currencies"""
enum Currency {
  BRZ
  USDC
}

"""The available fixed income options"""
enum FixedIncome {
  BIB01
}