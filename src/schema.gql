# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type GetBalanceOutput {
  balance: BigInt!
  formattedBalance: String!
}

"""Numbers with no precision loss"""
scalar BigInt

type UserOperationModel {
  callData: Hexadecimal!
  sender: Hexadecimal!
  signature: Hexadecimal!
  initCode: Hexadecimal!
  paymasterAndData: Hexadecimal!
  maxFeePerGas: BigInt!
  maxPriorityFeePerGas: BigInt!
  nonce: BigInt!
  callGasLimit: BigInt!
  preVerificationGas: BigInt!
  verificationGasLimit: BigInt!
}

"""Any string that starts with 0x"""
scalar Hexadecimal

type CreateUserOperationERC20ApproveOutput {
  userOperation: UserOperationModel
  chainId: Int!
}

type CreateUserOperationTransferOutput {
  userOperation: UserOperationModel!
  chainId: Int!
}

type CreateUserOperationInvestOutput {
  userOperation: UserOperationModel!
  chainId: Int!
}

type CreateUserOperationWithdrawInvestmentOutput {
  userOperation: UserOperationModel!
  chainId: Int!
}

type GetAccountAbstractionAddressByOwnerOutput {
  accountAbstractionAddress: Hexadecimal!
}

type ExecuteUserOperationOutput {
  operationHashes: [Hexadecimal!]!
}

type QuoteModel {
  quoteId: String!
  price: Float!
  expiresAt: String!
}

type DepositModel {
  pixAddress: String!
  qrCode: String!
  expiresAt: String!
}

type WithdrawModel {
  blockchainDepositAddress: Hexadecimal!
  expiresAt: String!
  qrCode: String!
  depositCurrency: StableCurrency!
  depositAmount: Float!
}

"""The supported currencies"""
enum StableCurrency {
  BRZ
  USDC
}

type TransactionModel {
  timestamp: Date
  type: String!
  amount: BigInt!
  asset: String!
  transactionId: String
  status: String!
}

"""Date custom scalar type"""
scalar Date

input UserOperationInput {
  callData: Hexadecimal!
  sender: Hexadecimal!
  signature: Hexadecimal!
  initCode: Hexadecimal!
  paymasterAndData: Hexadecimal!
  maxFeePerGas: BigInt!
  maxPriorityFeePerGas: BigInt!
  nonce: BigInt!
  callGasLimit: BigInt!
  preVerificationGas: BigInt!
  verificationGasLimit: BigInt!
}

type Query {
  balanceByCurrency(address: Hexadecimal!, currency: Asset!): GetBalanceOutput!
  accountAbstractionAddressByOwner(owner: Hexadecimal!): GetAccountAbstractionAddressByOwnerOutput!

  """
  Just a dummy resolver to include the "TransactionModel" type in the schema
  """
  dummyTransaction: [TransactionModel!]! @deprecated(reason: "This is a dummy resolver, it doesn't work")
}

"""All assets (Union of Currency & InvestmentAsset)"""
enum Asset {
  USDC
  BRZ
  BIB01
}

type Mutation {
  createUserOperationERC20Approve(accountAbstractionAddress: Hexadecimal!, from: Hexadecimal!, asset: Asset!): CreateUserOperationERC20ApproveOutput!
  createUserOperationTransfer(accountAbstractionAddress: Hexadecimal!, amount: String!, currency: StableCurrency!, from: Hexadecimal!, to: Hexadecimal!): CreateUserOperationTransferOutput!
  createUserOperationInvest(accountAbstractionAddress: Hexadecimal!, amount: String!, currency: StableCurrency!, from: Hexadecimal!, asset: InvestmentAsset!): CreateUserOperationInvestOutput!
  createUserOperationWithdrawInvestment(accountAbstractionAddress: Hexadecimal!, amount: String!, currency: StableCurrency!, from: Hexadecimal!, asset: InvestmentAsset!): CreateUserOperationWithdrawInvestmentOutput!
  userOperationExecute(userOperations: [UserOperationInput!]!): ExecuteUserOperationOutput!
  requestDepositQuote(from: FiatCurrency!, to: StableCurrency!, amount: Float!): QuoteModel!
  requestWithdrawQuote(from: StableCurrency!, to: FiatCurrency!, amount: Float!): QuoteModel!
  depositFiat(quoteId: String!, recipientAddress: Hexadecimal!, taxId: String!): DepositModel!
  withdrawFiat(quoteId: String!, recipientPixAddress: String!, taxId: String!): WithdrawModel!
}

"""The available investment options"""
enum InvestmentAsset {
  BIB01
}

"""The supported fiat currencies"""
enum FiatCurrency {
  BRL
}